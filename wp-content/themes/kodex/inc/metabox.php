<?php

$users = get_users( array( 'role__in' => array( 'administrator', 'editor', 'author' ) ) );
$usersList = '';

$i = 0;
foreach ( $users as $user ) {
    $usersList .= esc_html( $user->ID ) . ' : ' . $user->display_name;
    $usersList .= "\r\n";
}

$usersList = rtrim($usersList, '\r\n');
$usersList = trim($usersList);

/**
 * Generated by the WordPress Meta Box Generator
 * https://jeremyhixon.com/tool/wordpress-meta-box-generator/
 *
 * Retrieving the values:
 * Posttitle = get_post_meta( get_the_ID(), 'kodex_posttitle', true )
 * Guest = get_post_meta( get_the_ID(), 'kodex_guest', true )
 * Author = get_post_meta( get_the_ID(), 'kodex_author', true )
 * Featcaption = get_post_meta( get_the_ID(), 'kodex_featcaption', true )
 */

class Custom_Options {
    private $config = '{
        "title":       "Custom Options",
        "description": "Ovdje idu custom stvari koje su dodate mahsuz za Kodex a nisu u sastavnom dijelu WordPress-a",
        "prefix":      "kodex_",
        "domain":      "kodex",
        "class_name":  "Custom_Options",
        "post-type":   ["post"],
        "context":     "normal",
        "priority":    "high",
        "fields": [
            {
                "type":  "textarea",
                "label": "Posttitle",
                "rows":  "3",
                "id":    "kodex_posttitle",
                "desc":  "Prikazuje se poslije naslova kada se otvori 훾lanak"
            },
            {
                "type":  "text",
                "label": "Guest",
                "id":    "kodex_guest",
                "desc":  "U slu훾aju da autor ne posjeduje korisni훾ki ra훾un na portalu"
            },
            {
                "type":  "checkbox",
                "label": "Author",
                "id":    "kodex_author",
                "desc":  "Da li prikazati ime i prezime autora ili napisati Kodex"
            },
            {
                "type":  "text",
                "label": "Featcaption",
                "id":    "kodex_featcaption",
                "desc":  "Opis istaknute slike"
            }
        ]
    }';

    public function __construct($addonParam) {
        $this->config = json_decode( $this->config, true );
//        $this->config['fields'][4]['options'] = $addonParam;
        add_action( 'add_meta_boxes', [ $this, 'add_meta_boxes' ] );
//        add_action( 'admin_head', [ $this, 'admin_head' ] );
        add_action( 'save_post', [ $this, 'save_post' ] );
    }

    public function add_meta_boxes() {
        foreach ( $this->config['post-type'] as $screen ) {
            add_meta_box(
                sanitize_title( $this->config['title'] ),
                $this->config['title'],
                [ $this, 'add_meta_box_callback' ],
                $screen,
                $this->config['context'],
                $this->config['priority']
            );
        }
    }

    public function save_post( $post_id ) {
        foreach ( $this->config['fields'] as $field ) {
            switch ( $field['type'] ) {
                case 'checkbox':
                    update_post_meta( $post_id, $field['id'], isset( $_POST[ $field['id'] ] ) ? $_POST[ $field['id'] ] : '' );
                    break;
                default:
                    if ( isset( $_POST[ $field['id'] ] ) ) {
                        $sanitized = sanitize_text_field( $_POST[ $field['id'] ] );
                        update_post_meta( $post_id, $field['id'], $sanitized );
                    }
            }
        }
    }

    public function add_meta_box_callback() {
        echo '<div class="rwp-description">' . $this->config['description'] . '</div><br>';
        $this->fields_table();
    }

    private function fields_table() {
        foreach ( $this->config['fields'] as $field ) {
            echo '<p>';
            $this->label( $field );
            $this->field( $field );
            printf(
                '<span class="custom-desc">%s</span>',
                $field['desc']
            );
            echo '</p>';
        }
    }

    private function label( $field ) {
        switch ( $field['type'] ) {
            default:
                printf(
                    '<label class="custom-label" for="%s">%s</label>',
                    $field['id'], $field['label']
                );
        }
    }

    private function field( $field ) {
        switch ( $field['type'] ) {
            case 'checkbox':
                $this->checkbox( $field );
                break;
            case 'select':
                $this->select( $field );
                break;
            case 'textarea':
                $this->textarea( $field );
                break;
            default:
                $this->input( $field );
        }
    }

    private function checkbox( $field ) {
        printf(
            '<label class="rwp-checkbox-label"><input %s id="%s" name="%s" type="checkbox"> %s</label>',
            $this->checked( $field ),
            $field['id'], $field['id'],
            isset( $field['description'] ) ? $field['description'] : ''
        );
    }

    private function input( $field ) {
        printf(
            '<input class="custom-input %s" id="%s" name="%s" %s type="%s" value="%s">',
            isset( $field['class'] ) ? $field['class'] : '',
            $field['id'], $field['id'],
            isset( $field['pattern'] ) ? "pattern='{$field['pattern']}'" : '',
            $field['type'],
            $this->value( $field )
        );
    }

    private function select( $field ) {
        printf(
            '<select class="custom-select" id="%s" name="%s">%s</select>',
            $field['id'], $field['id'],
            $this->select_options( $field )
        );
    }

    private function select_selected( $field, $current ) {
        $value = $this->value( $field );
        if ( $value === $current ) {
            return 'selected';
        }
        return '';
    }

    private function select_options( $field ) {
        $output = [];
        $options = explode( "\r\n", $field['options'] );
        $i = 0;
        foreach ( $options as $option ) {
            $pair = explode( ':', $option );
            $pair = array_map( 'trim', $pair );

            $output[] = sprintf(
                '<option %s value="%s"> %s</option>',
                $this->select_selected( $field, $pair[0] ),
                $pair[0], $pair[1]
            );
            $i++;
        }
        return implode( '<br>', $output );
    }

    private function textarea( $field ) {
        printf(
            '<textarea class="custom-textarea" id="%s" name="%s" rows="%d">%s</textarea>',
            $field['id'], $field['id'],
            isset( $field['rows'] ) ? $field['rows'] : 5,
            $this->value( $field )
        );
    }

    private function value( $field ) {
        global $post;
        if ( metadata_exists( 'post', $post->ID, $field['id'] ) ) {
            $value = get_post_meta( $post->ID, $field['id'], true );
        } else if ( isset( $field['default'] ) ) {
            $value = $field['default'];
        } else {
            return '';
        }
        return str_replace( '\u0027', "'", $value );
    }

    private function checked( $field ) {
        global $post;
        if ( metadata_exists( 'post', $post->ID, $field['id'] ) ) {
            $value = get_post_meta( $post->ID, $field['id'], true );
            if ( $value === 'on' ) {
                return 'checked';
            }
            return '';
        } else if ( isset( $field['checked'] ) ) {
            return 'checked';
        }
        return '';
    }

}
new Custom_Options($usersList);

function register_experience_meta_fields(){

//    global $post;
    register_meta( 'post', 'kodex_posttitle', array(
        'type' => 'string',
        'single' => true,
        'show_in_rest' => true
    ));

    register_meta( 'post', 'kodex_guest', array(
        'type' => 'string',
        'single' => true,
        'show_in_rest' => true
    ));

    register_meta( 'post', 'kodex_author', array(
        'type' => 'boolean',
        'single' => true,
        'show_in_rest' => true,
    ));

    register_meta( 'post', 'kodex_featcaption', array(
        'type' => 'string',
        'single' => true,
        'show_in_rest' => true
    ));

}
add_action( 'rest_api_init', 'register_experience_meta_fields');